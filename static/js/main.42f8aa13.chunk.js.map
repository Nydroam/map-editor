{"version":3,"sources":["components/Tile/Tile.js","components/Grid/Grid.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["invertColor","hex","indexOf","slice","length","Error","parseInt","Tile","handleMouseMove","props","mouseDown","updateColor","row","col","newColor","char","console","log","handleMouse","onMouseOver","this","onMouseDown","className","style","backgroundColor","color","fontSize","rows","currChar","React","Component","Grid","colorGrid","charGrid","list","i","j","push","s","Fragment","gridTemplateColumns","formatCols","renderTiles","Form","handleChange","e","update","isNaN","target","value","id","handleOtherChange","defaultValue","type","onChange","defaultGrid","cols","val","g","r","App","property","state","setState","c","newGrid","newCharGrid","mouseDownHandler","preventDefault","mouseUpHandler","l","p","join","charGridString","csvContent","map","data","encodeURI","display","onMouseUp","href","download","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42f8aa13.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Tile.css';\r\n\r\n//code from https://stackoverflow.com/questions/35969656/\r\nfunction invertColor(hex) {\r\n    if (hex.indexOf('#') === 0) {\r\n        hex = hex.slice(1);\r\n    }\r\n    // convert 3-digit hex to 6-digits.\r\n    if (hex.length === 3) {\r\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n    }\r\n    if (hex.length !== 6) {\r\n        throw new Error('Invalid HEX color.');\r\n    }\r\n    let r = parseInt(hex.slice(0, 2), 16),\r\n        g = parseInt(hex.slice(2, 4), 16),\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n    // http://stackoverflow.com/a/3943023/112731\r\n        return (r * 0.299 + g * 0.587 + b * 0.114) > 186\r\n            ? '#000000'\r\n            : '#FFFFFF';\r\n}\r\n\r\nfunction padZero(str, len) {\r\n    len = len || 2;\r\n    var zeros = new Array(len).join('0');\r\n    return (zeros + str).slice(-len);\r\n}\r\n\r\nclass Tile extends React.Component{\r\n    handleMouseMove = ()=>{\r\n        const {mouseDown,updateColor,row,col,newColor,char} = this.props;\r\n        if(mouseDown){\r\n            console.log(row,col,newColor);\r\n            updateColor(row,col,newColor,char)\r\n        }\r\n    }\r\n    handleMouse = ()=>{\r\n        const{updateColor,row,col,newColor,char} = this.props\r\n        updateColor(row,col,newColor,char);\r\n    }\r\n    render(){\r\n        return(\r\n            <div onMouseOver={this.handleMouseMove} onMouseDown={this.handleMouse}className='tile' style={{backgroundColor:this.props.color}}>\r\n                <div className='center' style={{color:invertColor(this.props.color),fontSize:50.0/this.props.rows + \"vh\"}}>{this.props.currChar}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tile;","import React from 'react';\r\nimport Tile from '../Tile/Tile';\r\nimport './Grid.css';\r\nclass Grid extends React.Component{\r\n\r\n    renderTiles(){\r\n        const {colorGrid,charGrid,updateColor,mouseDown, color, char} = this.props;\r\n        let list = [];\r\n        for(let i = 0; i < colorGrid.length; i++){\r\n            for(let j = 0; j < colorGrid[i].length; j++){\r\n                list.push(<Tile currChar={charGrid[i][j]}char={char}mouseDown={mouseDown} updateColor={updateColor} color={colorGrid[i][j]} newColor={color} row={i} col={j} rows={colorGrid.length}></Tile>);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    formatCols(){\r\n        const {colorGrid} = this.props;\r\n        let s = \"\"\r\n        for(let i = 0; i < colorGrid[0].length; i++)\r\n            s+=\"auto \";\r\n        return s;\r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <div className=\"grid-container\" style={{gridTemplateColumns:this.formatCols()}}>\r\n                {this.renderTiles()}\r\n            </div>\r\n            \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport './Form.css';\r\nclass Form extends React.Component{\r\n    handleChange = (e)=>{\r\n        const {update} = this.props;\r\n        if(!isNaN(e.target.value) && parseInt(e.target.value,10)>0 && parseInt(e.target.value,10)<=50)\r\n            update(e.target.id,e.target.value);\r\n        console.log(e.target.value);\r\n    }\r\n    handleOtherChange = (e)=>{\r\n        const{update} = this.props;\r\n        update(e.target.id,e.target.value);\r\n    }\r\n    render(){\r\n        return(\r\n        <React.Fragment>\r\n            <h1>Map Editor</h1>\r\n            <p className='desc'>Type in the number of rows and columns of the grid you want. (1-50)</p>\r\n            <div className='flex'>\r\n            <label>Rows:</label> <input defaultValue='4' type=\"text\" id=\"rows\" onChange={this.handleChange}></input>\r\n            <label>Cols:</label> <input defaultValue='4' type=\"text\" id=\"cols\" onChange={this.handleChange}></input>\r\n            </div>\r\n            <p className='desc'>Choose the color and character you want associated with the tile that color represents</p>\r\n            <div className='flex'>\r\n            <label>Color:</label> <input type=\"color\"defaultValue='#ffffff' id=\"color\" onChange={this.handleOtherChange}></input>\r\n            <label>Label:</label> <input type=\"text\" defaultValue='0' id=\"char\" onChange={this.handleOtherChange}></input>\r\n            </div>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Grid from './components/Grid/Grid'\nimport Form from './components/Form/Form'\n\nconst defaultGrid = (rows,cols,val) => {\n  let g = [];\n  for(let i = 0; i < rows; i++){\n    let r = [];\n    for(let j = 0; j < cols; j++)\n      r.push(val);\n    g.push(r);\n  }\n  return g;\n}\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      rows:4,\n      cols:4,\n      color:'#ffffff',\n      char:'0',\n      colorGrid:defaultGrid(4,4,'#ffffff'),\n      charGrid:defaultGrid(4,4,'0'),\n      mouseDown:false,\n    };\n  }\n\n  update = (property,value) =>{\n    const {rows,cols,charGrid,colorGrid,char,color} = this.state;\n    if(value==='')\n      return;\n    this.setState({[property]:value});\n    console.log(property,\":\",value);\n    if(property==='rows')\n      this.setState({colorGrid:defaultGrid(value,cols,'#ffffff'), charGrid:defaultGrid(value,cols,'0') })\n    if(property==='cols')\n      this.setState({colorGrid:defaultGrid(rows,value,'#ffffff'), charGrid:defaultGrid(rows,value,'0') })\n    if(property==='char'){\n      for(let i = 0; i < charGrid.length; i++){\n        for(let j = 0; j < charGrid[i].length; j++){\n          if(colorGrid[i][j]===color)\n            charGrid[i][j]=value;\n        }\n      }\n    }\n  }\n\n  updateColor = (row,col,value,c) => {\n    const {colorGrid,charGrid} = this.state;\n    let newGrid = colorGrid;\n    newGrid[row][col] = value;\n    let newCharGrid = charGrid;\n    charGrid[row][col] = c;\n    this.setState({colorGrid:newGrid,charGrid:newCharGrid});\n  }\n\n  mouseDownHandler = (e) =>{\n    e.preventDefault();\n    const {mouseDown} = this.state;\n    console.log(\"MOUSE DOWN\");\n    if(!mouseDown){\n      this.setState({mouseDown:true});\n    }\n  }\n\n  mouseUpHandler = () =>{\n    const {mouseDown} = this.state;\n    if(mouseDown){\n      console.log(\"MOUSE UP\");\n      this.setState({mouseDown:false});\n    }\n  }\n\n  charGridString(){\n    const{charGrid} = this.state;\n    let s = \"\";\n    for(let i = 0; i < charGrid.length; i++){\n        let r = \"\";\n        for(let j = 0; j < charGrid[i].length; j++)\n            r+= charGrid[i][j] + \" \";\n        r += \"\\n\";\n        s += r;\n    }\n    return s;\n}\n  elementArray(){\n    const{charGrid} = this.state;\n    let l = [];\n    for(let i = 0; i < charGrid.length; i++){\n      let r = \"[\";\n      let p = [];\n        for(let j = 0; j < charGrid[i].length; j++)\n            p.push(charGrid[i][j]);\n\n        r += p.join(\", \") +\"]\";\n        l.push(<p>{r}</p>);\n    }\n    return l;\n  }\n\n  render(){\n    \n    console.log(this.charGridString());\n    const {colorGrid,charGrid,color,mouseDown,char} = this.state;\n    let csvContent = \"data:text/csv;charset=utf-8,\" \n    + charGrid.map(e => e.join(\",\")).join(\"\\n\");\n    let data=encodeURI(csvContent);\n    return (\n    <div className=\"App\" style={{display:'flex'}}>\n      <div className=\"left\" onMouseDown={this.mouseDownHandler} onMouseUp={this.mouseUpHandler}>\n      <Grid mouseDown={mouseDown} colorGrid={colorGrid} updateColor={this.updateColor} charGrid={charGrid} color={color} char={char}></Grid>\n      </div>\n      <div className=\"right\">\n      <Form update={this.update}></Form>\n      <a href={data} download=\"grid.csv\">Download Grid</a>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}