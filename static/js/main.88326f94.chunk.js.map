{"version":3,"sources":["components/Tile/Tile.js","components/Grid/Grid.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["invertColor","hex","indexOf","slice","length","Error","parseInt","Tile","handleMouseMove","props","mouseDown","updateColor","row","col","newColor","char","console","log","handleMouse","e","color","fill","fillGrid","button","fontSize","rows","cols","window","innerWidth","innerHeight","onMouseOver","this","onMouseDown","className","style","backgroundColor","currChar","React","Component","Grid","colorGrid","charGrid","list","i","j","push","s","Fragment","gridTemplateColumns","formatCols","renderTiles","Form","handleChange","update","isNaN","target","value","id","handleOtherChange","defaultValue","type","onChange","defaultGrid","val","g","r","App","property","state","setState","c","tempColorGrid","tempCharGrid","oldValue","maxRow","maxCol","fillGridFinal","newGrid","newCharGrid","mouseDownHandler","preventDefault","mouseUpHandler","toggleFill","l","p","join","charGridString","csvContent","map","data","encodeURI","display","onMouseUp","name","onClick","href","download","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iWAIA,SAASA,EAAYC,GAQjB,GAPyB,IAArBA,EAAIC,QAAQ,OACZD,EAAMA,EAAIE,MAAM,IAGD,IAAfF,EAAIG,SACJH,EAAMA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,IAExC,IAAfA,EAAIG,OACJ,MAAM,IAAIC,MAAM,sBAMhB,MAAY,KAJRC,SAASL,EAAIE,MAAM,EAAG,GAAI,IAIN,KAHpBG,SAASL,EAAIE,MAAM,EAAG,GAAI,IAGM,KAFhCG,SAASL,EAAIE,MAAM,EAAG,GAAI,IAEe,IACvC,UACA,U,IA2CCI,E,2MAjCXC,gBAAkB,WAAK,IAAD,EACoC,EAAKC,MAApDC,EADW,EACXA,UAAUC,EADC,EACDA,YAAYC,EADX,EACWA,IAAIC,EADf,EACeA,IAAIC,EADnB,EACmBA,SAASC,EAD5B,EAC4BA,KAC3CL,IACCM,QAAQC,IAAIL,EAAIC,EAAIC,GACpBH,EAAYC,EAAIC,EAAIC,EAASC,K,EAGrCG,YAAc,SAACC,GAAK,IAAD,EACgD,EAAKV,MAA9DE,EADS,EACTA,YAAYC,EADH,EACGA,IAAIC,EADP,EACOA,IAAIO,EADX,EACWA,MAAMN,EADjB,EACiBA,SAASC,EAD1B,EAC0BA,KAAKM,EAD/B,EAC+BA,KAAKC,EADpC,EACoCA,SACrC,IAAXH,EAAEI,QAAcT,IAAaM,IAC5BJ,QAAQC,IAAII,GACRA,EAGAC,EAASV,EAAIC,EAAIC,EAASC,EAAKK,GAF/BT,EAAYC,EAAIC,EAAIC,EAASC,K,EAKzCS,SAAW,WAAK,IAAD,EACS,EAAKf,MAAlBgB,EADI,EACJA,KAAKC,EADD,EACCA,KACZ,OAAKC,OAAOC,WAAa,KAAOF,EAAOC,OAAOE,YAAYJ,EAC/C,GAAKC,EAAO,KAEZ,GAAKD,EAAO,M,wEAGvB,OACI,yBAAKK,YAAaC,KAAKvB,gBAAiBwB,YAAaD,KAAKb,YAAYe,UAAU,OAAOC,MAAO,CAACC,gBAAgBJ,KAAKtB,MAAMW,QACtH,yBAAKa,UAAU,SAASC,MAAO,CAACd,MAAMpB,EAAY+B,KAAKtB,MAAMW,OAAOI,SAASO,KAAKP,aAAcO,KAAKtB,MAAM2B,e,GA5BxGC,IAAMC,WCOVC,G,4LA7BP,IAHU,IAAD,EACsER,KAAKtB,MAA7EY,EADE,EACFA,KAAKmB,EADH,EACGA,UAAUC,EADb,EACaA,SAAS9B,EADtB,EACsBA,YAAYD,EADlC,EACkCA,UAAWU,EAD7C,EAC6CA,MAAOL,EADpD,EACoDA,KAAMO,EAD1D,EAC0DA,SAC/DoB,EAAO,GACHC,EAAI,EAAGA,EAAIH,EAAUpC,OAAQuC,IACjC,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAUG,GAAGvC,OAAQwC,IACpCF,EAAKG,KAAK,kBAAC,EAAD,CAAMxB,KAAMA,EAAMC,SAAUA,EAAUc,SAAUK,EAASE,GAAGC,GAAG7B,KAAMA,EAAKL,UAAWA,EAAWC,YAAaA,EAAaS,MAAOoB,EAAUG,GAAGC,GAAI9B,SAAUM,EAAOR,IAAK+B,EAAG9B,IAAK+B,EAAGnB,KAAMe,EAAUpC,OAAQsB,KAAMc,EAAU,GAAGpC,UAGhP,OAAOsC,I,mCAMP,IAHS,IACFF,EAAaT,KAAKtB,MAAlB+B,UACHM,EAAI,GACAH,EAAI,EAAGA,EAAIH,EAAU,GAAGpC,OAAQuC,IACpCG,GAAG,QACP,OAAOA,I,+BAKP,OACI,kBAAC,IAAMC,SAAP,KACA,yBAAKd,UAAU,iBAAiBC,MAAO,CAACc,oBAAoBjB,KAAKkB,eAC5DlB,KAAKmB,oB,GA1BHb,IAAMC,YC8BVa,G,iNA9BXC,aAAe,SAACjC,GAAK,IACVkC,EAAU,EAAK5C,MAAf4C,QACHC,MAAMnC,EAAEoC,OAAOC,QAAUlD,SAASa,EAAEoC,OAAOC,MAAM,IAAI,GAAKlD,SAASa,EAAEoC,OAAOC,MAAM,KAAK,IACvFH,EAAOlC,EAAEoC,OAAOE,GAAGtC,EAAEoC,OAAOC,OAChCxC,QAAQC,IAAIE,EAAEoC,OAAOC,Q,EAEzBE,kBAAoB,SAACvC,IAEjBkC,EADgB,EAAK5C,MAAf4C,QACClC,EAAEoC,OAAOE,GAAGtC,EAAEoC,OAAOC,Q,wEAG5B,OACA,kBAAC,IAAMT,SAAP,KACI,0CACA,uBAAGd,UAAU,QAAb,oDACA,uBAAGA,UAAU,QAAb,uEACA,yBAAKA,UAAU,QACf,wCADA,IACqB,2BAAO0B,aAAa,IAAIC,KAAK,OAAOH,GAAG,OAAOI,SAAU9B,KAAKqB,eAClF,wCAFA,IAEqB,2BAAOO,aAAa,IAAIC,KAAK,OAAOH,GAAG,OAAOI,SAAU9B,KAAKqB,gBAElF,uBAAGnB,UAAU,QAAb,2FACI,gGACJ,yBAAKA,UAAU,QACf,yCADA,IACsB,2BAAO2B,KAAK,QAAOD,aAAa,UAAUF,GAAG,QAAQI,SAAU9B,KAAK2B,oBAC1F,yCAFA,IAEsB,2BAAOE,KAAK,OAAOD,aAAa,IAAIF,GAAG,OAAOI,SAAU9B,KAAK2B,0B,GAzB5ErB,IAAMC,YCGnBwB,EAAc,SAACrC,EAAKC,EAAKqC,GAE7B,IADA,IAAIC,EAAI,GACArB,EAAI,EAAGA,EAAIlB,EAAMkB,IAAI,CAE3B,IADA,IAAIsB,EAAI,GACArB,EAAI,EAAGA,EAAIlB,EAAMkB,IACvBqB,EAAEpB,KAAKkB,GACTC,EAAEnB,KAAKoB,GAET,OAAOD,GAgJME,E,YA7Ib,WAAYzD,GAAO,IAAD,8BAChB,4CAAMA,KAaR4C,OAAS,SAACc,EAASX,GAAU,IAAD,EACwB,EAAKY,MAAhD3C,EADmB,EACnBA,KAAKC,EADc,EACdA,KAAKe,EADS,EACTA,SAASD,EADA,EACAA,UAAepB,GADf,EACUL,KADV,EACeK,OACzC,GAAW,KAARoC,IAEH,EAAKa,SAAL,eAAgBF,EAAUX,IAC1BxC,QAAQC,IAAIkD,EAAS,IAAIX,GACX,SAAXW,GACD,EAAKE,SAAS,CAAC7B,UAAUsB,EAAYN,EAAM9B,EAAK,WAAYe,SAASqB,EAAYN,EAAM9B,EAAK,OAChF,SAAXyC,GACD,EAAKE,SAAS,CAAC7B,UAAUsB,EAAYrC,EAAK+B,EAAM,WAAYf,SAASqB,EAAYrC,EAAK+B,EAAM,OAChF,SAAXW,GACD,IAAI,IAAIxB,EAAI,EAAGA,EAAIF,EAASrC,OAAQuC,IAClC,IAAI,IAAIC,EAAI,EAAGA,EAAIH,EAASE,GAAGvC,OAAQwC,IAClCJ,EAAUG,GAAGC,KAAKxB,IACnBqB,EAASE,GAAGC,GAAGY,IA5BP,EAkClBlC,SAAW,SAACV,EAAIC,EAAI2C,EAAMc,EAAEC,EAAcC,EAAaC,GACrD,IAAIC,EAASH,EAAcnE,OACvBuE,EAASJ,EAAc,GAAGnE,OAC3BmE,EAAc3D,GAAKC,KAAO4D,IAE7BF,EAAc3D,GAAKC,GAAO2C,EAC1BgB,EAAa5D,GAAKC,GAAOyD,EACtB1D,EAAI,GAAK,GACV,EAAKU,SAASV,EAAI,EAAEC,EAAI2C,EAAMc,EAAEC,EAAcC,EAAaC,GAC1D7D,EAAI,EAAI8D,GACT,EAAKpD,SAASV,EAAI,EAAEC,EAAI2C,EAAMc,EAAEC,EAAcC,EAAaC,GAC1D5D,EAAI,GAAK,GACV,EAAKS,SAASV,EAAIC,EAAI,EAAE2C,EAAMc,EAAEC,EAAcC,EAAaC,GAC1D5D,EAAI,EAAI8D,GACT,EAAKrD,SAASV,EAAIC,EAAI,EAAE2C,EAAMc,EAAEC,EAAcC,EAAaC,KAhD7C,EAmDlBG,cAAgB,SAAChE,EAAIC,EAAI2C,EAAMc,EAAEG,GAAa,IAAD,EACf,EAAKL,MAC7BG,EAFuC,EACrC/B,UAEFgC,EAHuC,EAC3B/B,SAGhB,EAAKnB,SAASV,EAAIC,EAAI2C,EAAMc,EAAEC,EAAcC,EAAaC,GACzD,EAAKJ,SAAS,CAAC7B,UAAU+B,EAAc9B,SAAS+B,KAxDhC,EA2DlB7D,YAAc,SAACC,EAAIC,EAAI2C,EAAMc,GAAO,IAAD,EACJ,EAAKF,MAA3B5B,EAD0B,EAC1BA,UAAUC,EADgB,EAChBA,SACboC,EAAUrC,EACdqC,EAAQjE,GAAKC,GAAO2C,EACpB,IAAIsB,EAAcrC,EAClBA,EAAS7B,GAAKC,GAAOyD,EACrB,EAAKD,SAAS,CAAC7B,UAAUqC,EAAQpC,SAASqC,KAjE1B,EAoElBC,iBAAmB,SAAC5D,GAClBH,QAAQC,IAAI,aAAaE,EAAEI,QAC3BJ,EAAE6D,iBACkB,EAAKZ,MAAlB1D,WAEqB,IAAXS,EAAEI,QACjB,EAAK8C,SAAS,CAAC3D,WAAU,KA1EX,EA8ElBuE,eAAiB,SAAC9D,GACI,EAAKiD,MAAlB1D,WACoB,IAAXS,EAAEI,SAChBP,QAAQC,IAAI,YACZ,EAAKoD,SAAS,CAAC3D,WAAU,MAlFX,EAgHlBwE,WAAa,WAAK,IACT7D,EAAQ,EAAK+C,MAAb/C,KACP,EAAKgD,SAAS,CAAChD,MAAMA,KAhHrB,EAAK+C,MAAM,CACT3C,KAAK,EACLC,KAAK,EACLN,MAAM,UACNL,KAAK,IACLyB,UAAUsB,EAAY,EAAE,EAAE,WAC1BrB,SAASqB,EAAY,EAAE,EAAE,KACzBpD,WAAU,EACVW,MAAK,GAVS,E,8EAyFhB,IAHe,IACToB,EAAYV,KAAKqC,MAAjB3B,SACFK,EAAI,GACAH,EAAI,EAAGA,EAAIF,EAASrC,OAAQuC,IAAI,CAEpC,IADA,IAAIsB,EAAI,GACArB,EAAI,EAAGA,EAAIH,EAASE,GAAGvC,OAAQwC,IACnCqB,GAAIxB,EAASE,GAAGC,GAAK,IAEzBE,GADAmB,GAAK,KAGT,OAAOnB,I,qCAKP,IAHa,IACPL,EAAYV,KAAKqC,MAAjB3B,SACF0C,EAAI,GACAxC,EAAI,EAAGA,EAAIF,EAASrC,OAAQuC,IAAI,CAGpC,IAFF,IAAIsB,EAAI,IACJmB,EAAI,GACExC,EAAI,EAAGA,EAAIH,EAASE,GAAGvC,OAAQwC,IACnCwC,EAAEvC,KAAKJ,EAASE,GAAGC,IAEvBqB,GAAKmB,EAAEC,KAAK,MAAO,IACnBF,EAAEtC,KAAK,2BAAIoB,IAEf,OAAOkB,I,+BAQPnE,QAAQC,IAAIc,KAAKuD,kBACjBtE,QAAQC,IAAI,OAAOc,KAAKqC,MAAM/C,MAHxB,MAIiDU,KAAKqC,MAArD5B,EAJD,EAICA,UAAUC,EAJX,EAIWA,SAASrB,EAJpB,EAIoBA,MAAMV,EAJ1B,EAI0BA,UAAUK,EAJpC,EAIoCA,KAAKM,EAJzC,EAIyCA,KAC3CkE,EAAa,+BACf9C,EAAS+C,IAAI,SAAArE,GAAC,OAAIA,EAAEkE,KAAK,OAAMA,KAAK,MAClCI,EAAKC,UAAUH,GACnB,OACA,yBAAKtD,UAAU,MAAMC,MAAO,CAACyD,QAAQ,SACnC,yBAAK1D,UAAU,OAAOD,YAAaD,KAAKgD,iBAAkBa,UAAW7D,KAAKkD,gBAC1E,kBAAC,EAAD,CAAM5D,KAAMA,EAAKX,UAAWA,EAAW8B,UAAWA,EAAWlB,SAAUS,KAAK6C,cAAejE,YAAaoB,KAAKpB,YAAa8B,SAAUA,EAAUrB,MAAOA,EAAOL,KAAMA,KAElK,yBAAKkB,UAAU,SACf,kBAAC,EAAD,CAAMoB,OAAQtB,KAAKsB,SACnB,2BAAOO,KAAK,WAAWiC,KAAK,OAAOC,QAAS/D,KAAKmD,aAAoB,8CACrE,6BACA,6BACA,uBAAGa,KAAMN,EAAMO,SAAS,YAAxB,4B,GAvIY3D,IAAMC,WCHJ2D,QACW,cAA7BtE,OAAOuE,SAASC,UAEe,UAA7BxE,OAAOuE,SAASC,UAEhBxE,OAAOuE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.88326f94.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Tile.css';\r\n\r\n//code from https://stackoverflow.com/questions/35969656/\r\nfunction invertColor(hex) {\r\n    if (hex.indexOf('#') === 0) {\r\n        hex = hex.slice(1);\r\n    }\r\n    // convert 3-digit hex to 6-digits.\r\n    if (hex.length === 3) {\r\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n    }\r\n    if (hex.length !== 6) {\r\n        throw new Error('Invalid HEX color.');\r\n    }\r\n    let r = parseInt(hex.slice(0, 2), 16),\r\n        g = parseInt(hex.slice(2, 4), 16),\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n    // http://stackoverflow.com/a/3943023/112731\r\n        return (r * 0.299 + g * 0.587 + b * 0.114) > 186\r\n            ? '#000000'\r\n            : '#FFFFFF';\r\n}\r\n\r\nfunction padZero(str, len) {\r\n    len = len || 2;\r\n    var zeros = new Array(len).join('0');\r\n    return (zeros + str).slice(-len);\r\n}\r\n\r\nclass Tile extends React.Component{\r\n    handleMouseMove = ()=>{\r\n        const {mouseDown,updateColor,row,col,newColor,char} = this.props;\r\n        if(mouseDown){\r\n            console.log(row,col,newColor);\r\n            updateColor(row,col,newColor,char)\r\n        }\r\n    }\r\n    handleMouse = (e)=>{\r\n        const{updateColor,row,col,color,newColor,char,fill,fillGrid} = this.props\r\n        if(e.button===0 && newColor !== color){\r\n            console.log(fill);\r\n            if(!fill)\r\n                updateColor(row,col,newColor,char);\r\n            else\r\n                fillGrid(row,col,newColor,char,color);\r\n        }\r\n    }\r\n    fontSize = ()=>{\r\n        const {rows,cols} = this.props;\r\n        if( (window.innerWidth - 200) / cols < window.innerHeight/rows)\r\n            return 75 / cols + \"vw\";\r\n        else\r\n            return 75 / rows + \"vh\";\r\n    }\r\n    render(){\r\n        return(\r\n            <div onMouseOver={this.handleMouseMove} onMouseDown={this.handleMouse}className='tile' style={{backgroundColor:this.props.color}}>\r\n                <div className='center' style={{color:invertColor(this.props.color),fontSize:this.fontSize()}}>{this.props.currChar}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tile;","import React from 'react';\r\nimport Tile from '../Tile/Tile';\r\nimport './Grid.css';\r\nclass Grid extends React.Component{\r\n\r\n    renderTiles(){\r\n        const {fill,colorGrid,charGrid,updateColor,mouseDown, color, char, fillGrid} = this.props;\r\n        let list = [];\r\n        for(let i = 0; i < colorGrid.length; i++){\r\n            for(let j = 0; j < colorGrid[i].length; j++){\r\n                list.push(<Tile fill={fill} fillGrid={fillGrid} currChar={charGrid[i][j]}char={char}mouseDown={mouseDown} updateColor={updateColor} color={colorGrid[i][j]} newColor={color} row={i} col={j} rows={colorGrid.length} cols={colorGrid[0].length}></Tile>);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    formatCols(){\r\n        const {colorGrid} = this.props;\r\n        let s = \"\"\r\n        for(let i = 0; i < colorGrid[0].length; i++)\r\n            s+=\"auto \";\r\n        return s;\r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <div className=\"grid-container\" style={{gridTemplateColumns:this.formatCols()}}>\r\n                {this.renderTiles()}\r\n            </div>\r\n            \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport './Form.css';\r\nclass Form extends React.Component{\r\n    handleChange = (e)=>{\r\n        const {update} = this.props;\r\n        if(!isNaN(e.target.value) && parseInt(e.target.value,10)>0 && parseInt(e.target.value,10)<=50)\r\n            update(e.target.id,e.target.value);\r\n        console.log(e.target.value);\r\n    }\r\n    handleOtherChange = (e)=>{\r\n        const{update} = this.props;\r\n        update(e.target.id,e.target.value);\r\n    }\r\n    render(){\r\n        return(\r\n        <React.Fragment>\r\n            <h2>Map Editor</h2>\r\n            <p className='desc'>Left click and drag to apply colors to the grid.</p>\r\n            <p className='desc'>Type in the number of rows and columns of the grid you want. (1-50)</p>\r\n            <div className='flex'>\r\n            <label>Rows:</label> <input defaultValue='4' type=\"text\" id=\"rows\" onChange={this.handleChange}></input>\r\n            <label>Cols:</label> <input defaultValue='4' type=\"text\" id=\"cols\" onChange={this.handleChange}></input>\r\n            </div>\r\n            <p className='desc'>Choose the color and character you want associated with the tile that color represents.\r\n            </p><p>Changing the label will apply to all tiles of the selected color.</p>\r\n            <div className='flex'>\r\n            <label>Color:</label> <input type=\"color\"defaultValue='#ffffff' id=\"color\" onChange={this.handleOtherChange}></input>\r\n            <label>Label:</label> <input type=\"text\" defaultValue='0' id=\"char\" onChange={this.handleOtherChange}></input>\r\n            </div>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Grid from './components/Grid/Grid'\nimport Form from './components/Form/Form'\n\nconst defaultGrid = (rows,cols,val) => {\n  let g = [];\n  for(let i = 0; i < rows; i++){\n    let r = [];\n    for(let j = 0; j < cols; j++)\n      r.push(val);\n    g.push(r);\n  }\n  return g;\n}\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      rows:4,\n      cols:4,\n      color:'#ffffff',\n      char:'0',\n      colorGrid:defaultGrid(4,4,'#ffffff'),\n      charGrid:defaultGrid(4,4,'0'),\n      mouseDown:false,\n      fill:false,\n    };\n  }\n\n  update = (property,value) =>{\n    const {rows,cols,charGrid,colorGrid,char,color} = this.state;\n    if(value==='')\n      return;\n    this.setState({[property]:value});\n    console.log(property,\":\",value);\n    if(property==='rows')\n      this.setState({colorGrid:defaultGrid(value,cols,'#ffffff'), charGrid:defaultGrid(value,cols,'0') })\n    if(property==='cols')\n      this.setState({colorGrid:defaultGrid(rows,value,'#ffffff'), charGrid:defaultGrid(rows,value,'0') })\n    if(property==='char'){\n      for(let i = 0; i < charGrid.length; i++){\n        for(let j = 0; j < charGrid[i].length; j++){\n          if(colorGrid[i][j]===color)\n            charGrid[i][j]=value;\n        }\n      }\n    }\n  }\n\n  fillGrid = (row,col,value,c,tempColorGrid,tempCharGrid,oldValue) =>{\n    let maxRow = tempColorGrid.length;\n    let maxCol = tempColorGrid[0].length;\n    if(tempColorGrid[row][col]!==oldValue)\n      return;\n    tempColorGrid[row][col] = value;\n    tempCharGrid[row][col] = c;\n    if(row-1 >= 0)\n      this.fillGrid(row-1,col,value,c,tempColorGrid,tempCharGrid,oldValue);\n    if(row+1 < maxRow)\n      this.fillGrid(row+1,col,value,c,tempColorGrid,tempCharGrid,oldValue);\n    if(col-1 >= 0)\n      this.fillGrid(row,col-1,value,c,tempColorGrid,tempCharGrid,oldValue);\n    if(col+1 < maxCol)\n      this.fillGrid(row,col+1,value,c,tempColorGrid,tempCharGrid,oldValue);\n  }\n\n  fillGridFinal = (row,col,value,c,oldValue) =>{\n    const{colorGrid,charGrid} = this.state;\n    let tempColorGrid = colorGrid;\n    let tempCharGrid = charGrid;\n    this.fillGrid(row,col,value,c,tempColorGrid,tempCharGrid,oldValue);\n    this.setState({colorGrid:tempColorGrid,charGrid:tempCharGrid})\n  }\n\n  updateColor = (row,col,value,c) => {\n    const {colorGrid,charGrid} = this.state;\n    let newGrid = colorGrid;\n    newGrid[row][col] = value;\n    let newCharGrid = charGrid;\n    charGrid[row][col] = c;\n    this.setState({colorGrid:newGrid,charGrid:newCharGrid});\n  }\n\n  mouseDownHandler = (e) =>{\n    console.log(\"MOUSE DOWN\",e.button);\n    e.preventDefault();\n    const {mouseDown} = this.state;\n    \n    if(!mouseDown && e.button===0){\n      this.setState({mouseDown:true});\n    }\n  }\n\n  mouseUpHandler = (e) =>{\n    const {mouseDown} = this.state;\n    if(mouseDown && e.button===0){\n      console.log(\"MOUSE UP\");\n      this.setState({mouseDown:false});\n    }\n  }\n\n  charGridString(){\n    const{charGrid} = this.state;\n    let s = \"\";\n    for(let i = 0; i < charGrid.length; i++){\n        let r = \"\";\n        for(let j = 0; j < charGrid[i].length; j++)\n            r+= charGrid[i][j] + \" \";\n        r += \"\\n\";\n        s += r;\n    }\n    return s;\n}\n  elementArray(){\n    const{charGrid} = this.state;\n    let l = [];\n    for(let i = 0; i < charGrid.length; i++){\n      let r = \"[\";\n      let p = [];\n        for(let j = 0; j < charGrid[i].length; j++)\n            p.push(charGrid[i][j]);\n\n        r += p.join(\", \") +\"]\";\n        l.push(<p>{r}</p>);\n    }\n    return l;\n  }\n  toggleFill = ()=>{\n    const {fill} = this.state;\n    this.setState({fill:!fill})\n  }\n  render(){\n    \n    console.log(this.charGridString());\n    console.log(\"FILL\",this.state.fill);\n    const {colorGrid,charGrid,color,mouseDown,char,fill} = this.state;\n    let csvContent = \"data:text/csv;charset=utf-8,\" \n    + charGrid.map(e => e.join(\",\")).join(\"\\n\");\n    let data=encodeURI(csvContent);\n    return (\n    <div className=\"App\" style={{display:'flex'}}>\n      <div className=\"left\" onMouseDown={this.mouseDownHandler} onMouseUp={this.mouseUpHandler}>\n      <Grid fill={fill}mouseDown={mouseDown} colorGrid={colorGrid} fillGrid={this.fillGridFinal} updateColor={this.updateColor} charGrid={charGrid} color={color} char={char}></Grid>\n      </div>\n      <div className=\"right\">\n      <Form update={this.update}></Form>\n      <input type=\"checkbox\" name=\"fill\" onClick={this.toggleFill}></input><label>Toggle Fill</label>\n      <br></br>\n      <br></br>\n      <a href={data} download=\"grid.csv\">Download Map (csv)</a>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}